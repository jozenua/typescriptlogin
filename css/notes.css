/**

All this info can be found on w3schools

 Auto-complete for <input>: 
    autocomplete -> on/off
    autofocus
    form
    formaction = is just the regular action attribute
    formenctype = is usually one of three options that I can google but it doesnn't seem useful
    formmethod = post or get
    formnovalidate = does not validate form upon request
    formtarget = changes the submit destination of the form from what's in post to another set target
    height and width = sets the size of an input element with type image
    list = makes a list out of a data list
    min and max = sets minimum and maximum values for an input feild
    multiple = allows for multiple inputs
    pattern (regexp)
    placeholder
    required
    step = can be used with number, range, date, datetime-local, month, time and week




    NODE NOTES

* node's default event emitter is in the events library. You can edit this file as you please to add your own custom emitters

    //Example of a quick custom made JS emitter

function Emitter() {
    this.events = {};
}

Emitter.prototype.on = function(type: Array, listener:any) { /// on is used to set the property and the eventlistener
    this.events[type] = this.events[type] || [];        /// this sets the property of this.events to be an array called type
    this.events[type].push(listener);  
}

Emitter.prototype.emit = function(type) { /// emits the result of the listener that is attached to the 'eventname'
    if(this.events[type]) {
        this.events[type].forEach(function(listener) {
            listener();
        });
    }
}


i'm technically just making an object with an array that contains a list of functions that I 


module.exports is oviously an object

module.exports.greet = function() {};
module.exports = "something";
module.exports = 56 + 222;
function test() {
    console.log("This is a test");
}
module.exports = {
    test: test
}


Example of using .cal and .apply 

const human = {
    name: 'James bond',
    age: 52,
    sentence: (*params*) => console.log(Mr. ${this.name} is ${this.age} years old) 
}

human.sentence() // spits out the string
human.sentence.call({name: 'Becky bond', age:50}, param1,param2) spits out becky and the value of any other parameters you'll add
human.sentence.apply({name: 'Becky bond', age:50}, [param1,param2]) spits out becky and the value of any other parameters you'll add but params must be added as an array

Buffer Example 
var buf = new Buffer('hello', 'utf8') utf8 is default encoding. The first parameter serves aas input but also sets the size of buf. Anything I put into 
buf will replace what's already in there

Buffer Array Example 

Note: All buffers are quantifying data in bits
var buffer = new ArrayBuffer(8); 8 bytes which is 64 bits
var view = new Int32Array(buffer); this accept the content in buffer two characters at a time because it's using 32 bits to encode each character 
view[0] = 5;
view[1] = 10;
view[2] = 38; this won't be added because the buffer is already full

Callback function example 

function greet(callback) {
    callback();
}

let example = greet(function()
 {      console.log('this is my callback')
     })



     using fs 
     var fs = requrie('fs');
     var greet = fs.readFileSync(__dirname + 'greet.txt', 'utf8');  
     
     STREAMS
     var fs = require('fs');
     var zlib = require('zlib');


     var readable = fs.createReadStream(__dirname + '/greet.txt', {encoding: 'utf8'}, highWaterMark: 1024(bytes) * 32); the highWaterMark option sets a ceiling on the size of the chunk that's streamed 

     var writable = fs.createWriteStream(__dirname + 'greetcopy.txt');

     var compressed = fs.createWriteStream(_dirname + 'greet.txt.gz');

     readable.on('data', function(chunk) {
         console.log(chunk); if encoding isn't added, it prints out the buffer character coding
         writable.write(chunk);
     }                      

     OR 

     readable.pipe(writable); 

     let gzip = zlib.createGzip(); 
     
     readable.pipe(gzip).pipe(compressed); gzip is both readable and writable. It's duplex so i'm reading from gzip and writing to compressed


    *http parser is on github

    HTTP server requests
    var http = require('https') 

    http.createServer(function(req,res) {
        res.writeHead(200, {'Content-Type : 'text/htm});
        var html = fs.readFileSync(__dirname + 'index.htm', 'utf8');
        var message = 'Hello world...';
        html = html.replace('{Message}', message);
        res.end('html');
    }).listen([port-number], '[address]') domain that is connected to that port     

     */